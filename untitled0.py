# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDkrP9RxFyGWvKJj79cB-H_q88C20JxV
"""

!pip install scikit-learn matplotlib seaborn plotly

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report
import plotly.express as px

# Load the dataset
url = 'https://raw.githubusercontent.com/defcom17/NSL_KDD/master/KDDTrain+.txt'
columns = [
    'duration', 'protocol_type', 'service', 'flag', 'src_bytes', 'dst_bytes',
    'land', 'wrong_fragment', 'urgent', 'hot', 'num_failed_logins', 'logged_in',
    'num_compromised', 'root_shell', 'su_attempted', 'num_root', 'num_file_creations',
    'num_shells', 'num_access_files', 'num_outbound_cmds', 'is_host_login',
    'is_guest_login', 'count', 'srv_count', 'serror_rate', 'srv_serror_rate',
    'rerror_rate', 'srv_rerror_rate', 'same_srv_rate', 'diff_srv_rate',
    'srv_diff_host_rate', 'dst_host_count', 'dst_host_srv_count', 'dst_host_same_srv_rate',
    'dst_host_diff_srv_rate', 'dst_host_same_src_port_rate', 'dst_host_srv_diff_host_rate',
    'dst_host_serror_rate', 'dst_host_srv_serror_rate', 'dst_host_rerror_rate',
    'dst_host_srv_rerror_rate', 'outcome'
]

df = pd.read_csv(url, names=columns)

# Encode categorical features
df = pd.get_dummies(df)

# Normalize numeric features
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

# Initialize and train the Isolation Forest model
model = IsolationForest(contamination=0.05, random_state=42)
df['anomaly'] = model.fit_predict(scaled_data)

# Convert -1 to 1 (anomaly) and 1 to 0 (normal)
df['anomaly'] = df['anomaly'].map({-1: 1, 1: 0})

# Display the number of anomalies detected
print(f"Total anomalies detected: {df['anomaly'].sum()}")

# Assuming 'outcome' is the ground truth column
print(classification_report(df['outcome'], df['anomaly']))

# Plotting the anomalies
plt.figure(figsize=(10, 6))
sns.scatterplot(x=df.index, y=df['num_outbound_cmds'], hue=df['anomaly'], palette='coolwarm')
plt.title('Anomaly Detection in Network Traffic')
plt.xlabel('Index')
plt.ylabel('Number of Outbound Commands')
plt.show()

# Interactive plot using Plotly
fig = px.scatter(df, x=df.index, y='num_outbound_cmds', color='anomaly',
                 labels={'num_outbound_cmds': 'Number of Outbound Commands'},
                 title='Interactive Anomaly Detection in Network Traffic')
fig.show()